import { Component, OnInit } from '@angular/core';
import { CartService } from '../services/cart.service';
import { CartpaymentService } from '../services/cartpayment.service'; 
import { CartItem } from '../interfaces/cart'
import { UserService } from '../services/user.service';
import { CustomerService } from '../services/customer.service';
import { CartItem1 } from '../interfaces/customer';
import { Router } from '@angular/router';
import { map } from 'rxjs/operators';
import { forkJoin } from 'rxjs';  // Import forkJoin t·ª´ rxjs
import { ProductService } from '../services/product.service';



@Component({
  selector: 'app-cart',
  standalone: false,
  templateUrl: './cart.component.html',
  styleUrl: './cart.component.css',
})

export class CartComponent implements OnInit {
  currentUserPhone: string | null = null;
  currentCustomerId: string | null = null;
  isUserLoggedIn: boolean = false;

  // Danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng
  products: CartItem[] = [];  // Danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng
  items: CartItem1[] = [];  // Danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng customer
  selectedProductIds: Set<string> = new Set();
  constructor(
    private cartService: CartService,
    public cartpaymentService: CartpaymentService,
    private userService: UserService,
    private customerService: CustomerService,
    private productService: ProductService,
    private router: Router
  ) {}

  total: number = 0; // T·ªïng gi·ªè h√†ng
  totalQuantity: number = 0; // T·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng

  // Ki·ªÉm tra gi·ªè h√†ng c√≥ tr·ªëng hay kh√¥ng
  get isEmpty(): boolean {
    return this.products.length === 0;
  }
  

  loadCartByPhone(phone: string) {
    console.log("üì¢ G·ªçi API l·∫•y gi·ªè h√†ng v·ªõi s·ªë ƒëi·ªán tho·∫°i:", phone);
  
    // üìå L·∫•y danh s√°ch s·∫£n ph·∫©m ƒë√£ ch·ªçn t·ª´ cartpaymentService
    const selectedCartItems = this.cartpaymentService.getCartPaymentItems().map(item => ({
      productId: item.productId,
      cartQuantity: item.cartQuantity
    }));
    console.log("üõí S·∫£n ph·∫©m ƒë√£ ch·ªçn t·ª´ cartpaymentService:", selectedCartItems);
  
    // üìå G·ªçi API l·∫•y gi·ªè h√†ng t·ª´ Database
    this.customerService.getCartByPhone(phone).subscribe(
      (cartItems: CartItem1[]) => {
        console.log("‚úÖ Gi·ªè h√†ng t·ª´ Database:", cartItems);
  
        if (cartItems.length === 0 && selectedCartItems.length === 0) {
          console.log("üõí Gi·ªè h√†ng tr·ªëng!");
          this.products = [];
          this.updateCartPaymentSummary();
          return;
        }
  
        // üîÄ K·∫øt h·ª£p gi·ªè h√†ng t·ª´ Database v√† cartpaymentService, lo·∫°i b·ªè s·∫£n ph·∫©m tr√πng
        const combinedCartMap = new Map();
  
        // Th√™m s·∫£n ph·∫©m t·ª´ Database
        cartItems.forEach(item => {
          combinedCartMap.set(item.productId, item);
        });
  
        // Th√™m s·∫£n ph·∫©m t·ª´ cartpaymentService (n·∫øu ch∆∞a c√≥)
        selectedCartItems.forEach(item => {
          if (!combinedCartMap.has(item.productId)) {
            combinedCartMap.set(item.productId, item);
          }
        });
  
        const combinedCartItems = Array.from(combinedCartMap.values());
        console.log("üîÄ Gi·ªè h√†ng k·∫øt h·ª£p (lo·∫°i tr√πng l·∫∑p):", combinedCartItems);
  
        // üìå C·∫≠p nh·∫≠t gi·ªè h√†ng m·ªõi l√™n server
        this.customerService.updateCustomerCart(phone, combinedCartItems).subscribe(
          () => console.log("‚úÖ Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t l√™n server."),
          error => console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng l√™n server:", error)
        );
  
        // üìå G·ª≠i request l·∫•y th√¥ng tin s·∫£n ph·∫©m
        const productRequests = combinedCartItems.map(item =>
          this.productService.getProductDetails(item.productId).pipe(
            map(productDetails => {
              productDetails.cartQuantity = item.cartQuantity;
              return productDetails;
            })
          )
        );
  
        // üìå G·ªçi API l·∫•y chi ti·∫øt s·∫£n ph·∫©m
        forkJoin(productRequests).subscribe(
          (products: CartItem[]) => {
            this.products = products; // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m
  
            // C·∫≠p nh·∫≠t selectedProductIds v√† cartpaymentService n·∫øu s·∫£n ph·∫©m ch∆∞a t·ªìn t·∫°i
            products.forEach(product => {
              const productId = product.productId.toString();
              if (!this.selectedProductIds.has(productId)) {
                this.selectedProductIds.add(productId);
                this.cartpaymentService.addToCartPayment(productId, product);
              }
            });
  
            this.updateCartPaymentSummary();
          },
          error => {
            console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m:', error);
          }
        );
      },
      error => {
        console.error('‚ùå L·ªói khi t·∫£i gi·ªè h√†ng t·ª´ database:', error);
      }
    );
  }


  // L·∫•y danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng
  loadProducts(): void {
    this.cartService.getCartItems().subscribe({
    next: (data) => {
    this.products = data.map((product) => {
    // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m c√≥ h√¨nh ·∫£nh d∆∞·ªõi d·∫°ng chu·ªói JSON
      if (product.Image && typeof product.Image === 'string') {
        try {
        const images = JSON.parse(product.Image)// Ph√¢n t√≠ch chu·ªói JSON th√†nh m·∫£ng
        product.Image = images[0];   // L·∫•y h√¨nh ·∫£nh ƒë·∫ßu ti√™n t·ª´ m·∫£ng
            } 
        catch (e) { 
        console.error('Error parsing images for product:', product.Name, e);
        product.Image = '';  // N·∫øu c√≥ l·ªói, ƒë·ªÉ h√¨nh ·∫£nh r·ªóng
        }
        }
        return product;
        });
      },
        error: (err) => {console.error('Error loading cart:', err); }
        });
      }
      loadSelectedProducts(): void {
        // L·∫•y l·∫°i c√°c productId ƒë√£ ch·ªçn t·ª´ CartpaymentService khi quay l·∫°i trang gi·ªè h√†ng
        this.selectedProductIds = this.cartpaymentService.getSelectedProducts();
      }
    
    ngOnInit(): void {
      // L·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng khi component kh·ªüi t·∫°o
      this.loadProducts(); // Thay v√¨ l·∫∑p l·∫°i code trong ngOnInit, g·ªçi h√†m loadProducts()
      this.loadSelectedProducts();
      this.updateCartPaymentSummary();

      this.userService.currentUserPhone$.subscribe((phone: string | null) => {
        this.currentUserPhone = phone;
        this.isUserLoggedIn = !!phone;
      
        if (phone) {
          this.loadCartByPhone(phone);
  
          console.log("üì¢ Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi s·ªë ƒëi·ªán tho·∫°i:", phone);
        } else {
          console.log("‚ö† Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, t·∫£i gi·ªè h√†ng t·ª´ session.");
          this.loadProducts();
        }
      });

  }

    isProductSelected(productId: string): boolean {
      return this.selectedProductIds.has(productId); // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ ƒë∆∞·ª£c ch·ªçn kh√¥ng
    }
   // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
   changeQuantity(action: string, productId: string): void {
    const product = this.products.find((p) => p.productId === productId);
    if (!product) return;  // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i trong gi·ªè kh√¥ng

    if (action === 'increase') {
      product.cartQuantity++;  // TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    } else if (action === 'decrease' && product.cartQuantity > 1) {
      product.cartQuantity--;  // Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m n·∫øu l·ªõn h∆°n 1
    } else if (action === 'decrease' && product.cartQuantity === 1) {
      this.removeProduct(productId);  // N·∫øu s·ªë l∆∞·ª£ng l√† 1, x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè
      return;
    }
    this.cartpaymentService.updateProductQuantity(productId, product.cartQuantity); 
    this.updateCartPaymentSummary();
    // G·ªçi ph∆∞∆°ng th·ª©c updateCartItem ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng l√™n server
    this.cartService.updateCartItem(product.productId, product.cartQuantity).subscribe({
      next: () => {
      },
      error: (err) => {
        console.error('Error updating item quantity:', err);
      }
    });
    // üî• N·∫øu kh√°ch h√†ng ƒë√£ ƒëƒÉng nh·∫≠p, c·∫≠p nh·∫≠t gi·ªè h√†ng l√™n server
  if (this.isUserLoggedIn && this.currentUserPhone) {
    this.updateCustomerCartOnServer();
  }
  }

  // G·ª≠i gi·ªè h√†ng c·ªßa kh√°ch h√†ng l√™n server ƒë·ªÉ c·∫≠p nh·∫≠t database
updateCustomerCartOnServer(): void {
  if (!this.currentUserPhone) return;

  // L·∫•y gi·ªè h√†ng m·ªõi ƒë·ªÉ g·ª≠i l√™n server
  const updatedCart = this.products.map(product => ({
    productId: product.productId,
    cartQuantity: product.cartQuantity
  }));

  console.log("üì¢ G·ª≠i gi·ªè h√†ng m·ªõi l√™n server:", updatedCart);

  // G·ªçi API c·∫≠p nh·∫≠t gi·ªè h√†ng c·ªßa kh√°ch h√†ng tr√™n server
  this.customerService.updateCustomerCart(this.currentUserPhone, updatedCart).subscribe({
    next: () => {
      console.log("‚úÖ Gi·ªè h√†ng c·ªßa kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr√™n server.");
    },
    error: (err) => {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng tr√™n server:", err);
    }
  });
}

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ª´ input
  updateQuantity(event: any, productId: string): void {
    const newQuantity = event.target.value;  // L·∫•y gi√° tr·ªã m·ªõi t·ª´ input
    const product = this.products.find((p) => p.productId === productId);

    if (product && newQuantity >= 1) {
      
      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong gi·ªè
      this.cartService.updateCartItem(product.productId, parseInt(newQuantity, 10)).subscribe({
        next: () => {
          product.cartQuantity = parseInt(newQuantity, 10);  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong gi·ªè
          this.cartpaymentService.updateProductQuantity(productId, product.cartQuantity);
          this.updateCartPaymentSummary();
        },
        error: (err) => {
          console.error('Error updating item quantity:', err);
        }
      });
    }
  }

  // X√≥a s·∫£n ph·∫©m khi nh·∫•n "Remove"
  removeProduct(productId: string): void {
    const index = this.products.findIndex((p) => p.productId === productId);
    if (index !== -1) {
      this.products.splice(index, 1); // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
      this.cartpaymentService.removeFromCartPayment(productId);
      this.updateCartPaymentSummary(); // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn v√† s·ªë l∆∞·ª£ng
      this.cartService.removeCartItem(productId);
       // G·ªçi API ƒë·ªÉ x√≥a s·∫£n ph·∫©m kh·ªèi server
    this.cartService.removeCartItem(productId).subscribe({
      next: () => {
        console.log(`Product ${productId} removed successfully`);
      },
      error: (err) => {
        console.error('Error removing product:', err);
      }
    })
  }
   // üî• N·∫øu kh√°ch h√†ng ƒë√£ ƒëƒÉng nh·∫≠p, c·∫≠p nh·∫≠t gi·ªè h√†ng l√™n server
   if (this.isUserLoggedIn && this.currentUserPhone) {
    this.updateCustomerCartOnServer();
  }
}


onCheckboxChange(event: any, product: CartItem): void {
  const productId = product.productId.toString(); // ƒê·∫£m b·∫£o productId l√† chu·ªói
  if (event.target.checked) {
    this.selectedProductIds.add(productId);
    this.cartpaymentService.addToCartPayment(productId, product);
  } else {
    this.selectedProductIds.delete(productId);
    this.cartpaymentService.removeFromCartPayment(productId);
  }
  this.updateCartPaymentSummary();
}

  // C·∫≠p nh·∫≠t t·ªïng s·ªë l∆∞·ª£ng v√† t·ªïng s·ªë ti·ªÅn t·ª´ CartPaymentService
  updateCartPaymentSummary(): void {
    this.totalQuantity = this.cartpaymentService.getTotalQuantity(); // L·∫•y t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ª´ CartPaymentService
    this.total = this.cartpaymentService.getTotalAmount(); // L·∫•y t·ªïng s·ªë ti·ªÅn t·ª´ CartPaymentService
  }

  
  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t Checkout
  onCheckout(): void {
    if (this.isUserLoggedIn) {
      this.router.navigate(['/payment-shipping']);
    } else {
      this.router.navigate(['/login-page'], { queryParams: { returnUrl: '/payment-shipping' } });
    }
  }
 }