import { Component, OnInit } from '@angular/core';
import { CartService } from '../services/cart.service';
import { CartpaymentService } from '../services/cartpayment.service'; 
import { CartItem } from '../interfaces/cart'
import { UserService } from '../services/user.service';
import { CustomerService } from '../services/customer.service';
import { CartItem1 } from '../interfaces/customer';
import { Router } from '@angular/router';


@Component({
  selector: 'app-cart',
  standalone: false,
  templateUrl: './cart.component.html',
  styleUrl: './cart.component.css',
})

export class CartComponent implements OnInit {
  currentUserPhone: string | null = null;
  currentCustomerId: string | null = null;
  isUserLoggedIn: boolean = false;

  // Danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng
  products: CartItem1[] = [];  // Danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng
  selectedProductIds: Set<string> = new Set();
  constructor(
    private cartService: CartService,
    public cartpaymentService: CartpaymentService,
    private userService: UserService,
    private customerService: CustomerService,
    private router: Router
  ) {}

  total: number = 0; // T·ªïng gi·ªè h√†ng
  totalQuantity: number = 0; // T·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng

  // Ki·ªÉm tra gi·ªè h√†ng c√≥ tr·ªëng hay kh√¥ng
  get isEmpty(): boolean {
    return this.products.length === 0;
  }

  getCustomerId(phone: string) {
    this.customerService.getCustomerByPhone(phone).subscribe(
      (customer) => {
        this.currentUserPhone = customer.Phone;
        this.isUserLoggedIn = true;
        if (customer.Phone) {
          this.loadCart(phone);
          console.log("üì¢ ID kh√°ch h√†ng:", this.currentCustomerId);
        }
      },
      (error) => {
        this.isUserLoggedIn = false;
        this.loadProducts(); // N·∫øu kh√¥ng t√¨m th·∫•y kh√°ch h√†ng, load gi·ªè h√†ng t·ª´ session
      }
    );
  }
  
  // // Load gi·ªè h√†ng t·ª´ Database n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
  loadCart(phone: string) {
    console.log("üì¢ G·ªçi API l·∫•y gi·ªè h√†ng v·ªõi customerId:", phone);
  
    this.customerService.getCartByCustomerId(phone).subscribe(
      (cartItems: CartItem1[]) => {
        console.log("‚úÖ Gi·ªè h√†ng t·ª´ Database:", cartItems);
  
        if (cartItems.length === 0) {
          console.log("üõí Gi·ªè h√†ng tr·ªëng!");
          this.products = [];
          return;
        }
  
    //     // L·∫•y danh s√°ch productId t·ª´ gi·ªè h√†ng
    //     const productIds = cartItems.map(item => item.productId);
  
    //     // G·ªçi API l·∫•y th√¥ng tin s·∫£n ph·∫©m d·ª±a tr√™n productId
    //     this.customerService.getProductsByIds(productIds).subscribe(
    //       (productDetails: CartItem[]) => {
    //         console.log("üì¶ Th√¥ng tin s·∫£n ph·∫©m:", productDetails);
  
    //         // üîÑ Chuy·ªÉn ƒë·ªïi `CartItem1` th√†nh `CartItem`
    //         this.products = cartItems.map(cartItem => {
    //           const productDetail = productDetails.find(p => p.productId === cartItem.productId);
  
    //           return {
    //             productId: cartItem.productId,
    //             cartQuantity: cartItem.cartQuantity,
    //             category_id: productDetail?.category_id || '',
    //             Name: productDetail?.Name || 'Kh√¥ng c√≥ t√™n',
    //             Price: productDetail?.Price || 0,
    //             Image: productDetail?.Image || '',
    //             Description: productDetail?.Description || '',
    //             Origin: productDetail?.Origin || '',
    //             Uses: productDetail?.Uses || '',
    //             Store: productDetail?.Store || '',
    //             Quantity: productDetail?.Quantity || 0,
    //             Create_date: productDetail?.Create_date || '',
    //             Dimension: productDetail?.Dimension || '',
    //             Story: productDetail?.Story || '',
    //             ProductCare: productDetail?.ProductCare || '',
    //             ShippingReturn: productDetail?.ShippingReturn || '',
    //           } as CartItem;
    //         });
  
    //         this.updateCartPaymentSummary();
    //       },
    //       (error: any) => {
    //         console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m:", error);
    //       }
    //     );
    //   },
    //   (error: any) => {
    //     console.error("‚ùå L·ªói khi l·∫•y gi·ªè h√†ng t·ª´ Database:", error);
    //     this.products = [];
      }
    );
  }


  // L·∫•y danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng
  loadProducts(): void {
    this.cartService.getCartItems().subscribe({
    next: (data) => {
    this.products = data.map((product) => {
    // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m c√≥ h√¨nh ·∫£nh d∆∞·ªõi d·∫°ng chu·ªói JSON
      if (product.Image && typeof product.Image === 'string') {
        try {
        const images = JSON.parse(product.Image)// Ph√¢n t√≠ch chu·ªói JSON th√†nh m·∫£ng
        product.Image = images[0];   // L·∫•y h√¨nh ·∫£nh ƒë·∫ßu ti√™n t·ª´ m·∫£ng
            } 
        catch (e) { 
        console.error('Error parsing images for product:', product.Name, e);
        product.Image = '';  // N·∫øu c√≥ l·ªói, ƒë·ªÉ h√¨nh ·∫£nh r·ªóng
        }
        }
        return product;
        });
      },
        error: (err) => {console.error('Error loading cart:', err); }
        });
      }
      loadSelectedProducts(): void {
        // L·∫•y l·∫°i c√°c productId ƒë√£ ch·ªçn t·ª´ CartpaymentService khi quay l·∫°i trang gi·ªè h√†ng
        this.selectedProductIds = this.cartpaymentService.getSelectedProducts();
      }
    
    ngOnInit(): void {
      // L·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng khi component kh·ªüi t·∫°o
      this.loadProducts(); // Thay v√¨ l·∫∑p l·∫°i code trong ngOnInit, g·ªçi h√†m loadProducts()
      this.loadSelectedProducts();
      this.updateCartPaymentSummary();

      // Subscribe ƒë·ªÉ l·∫•y s·ªë ƒëi·ªán tho·∫°i c·ªßa ng∆∞·ªùi d√πng khi h·ªç ƒëƒÉng nh·∫≠p
      this.userService.currentUserPhone$.subscribe((phone: string | null) => {
      this.currentUserPhone = phone;
      this.isUserLoggedIn = !!phone; // ƒê·∫∑t isUserLoggedIn d·ª±a tr√™n vi·ªác c√≥ phone hay kh√¥ng
    
      if (phone) {
        // L·∫•y ID kh√°ch h√†ng n·∫øu c√≥ s·ªë ƒëi·ªán tho·∫°i
        this.getCustomerId(phone);
        console.log("üì¢ Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi s·ªë ƒëi·ªán tho·∫°i:", phone);
      } else {
        // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, load gi·ªè h√†ng t·ª´ session
        console.log("‚ö† Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, t·∫£i gi·ªè h√†ng t·ª´ session.");
        this.loadProducts();
      }
    });

  }

    isProductSelected(productId: string): boolean {
      return this.selectedProductIds.has(productId); // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ ƒë∆∞·ª£c ch·ªçn kh√¥ng
    }
   // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
   changeQuantity(action: string, productId: string): void {
    const product = this.products.find((p) => p.productId === productId);
    if (!product) return;  // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i trong gi·ªè kh√¥ng

    if (action === 'increase') {
      product.cartQuantity++;  // TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    } else if (action === 'decrease' && product.cartQuantity > 1) {
      product.cartQuantity--;  // Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m n·∫øu l·ªõn h∆°n 1
    } else if (action === 'decrease' && product.cartQuantity === 1) {
      this.removeProduct(productId);  // N·∫øu s·ªë l∆∞·ª£ng l√† 1, x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè
      return;
    }
    this.cartpaymentService.updateProductQuantity(productId, product.cartQuantity); 
    this.updateCartPaymentSummary();
    // G·ªçi ph∆∞∆°ng th·ª©c updateCartItem ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng l√™n server
    this.cartService.updateCartItem(product.productId, product.cartQuantity).subscribe({
      next: () => {
      },
      error: (err) => {
        console.error('Error updating item quantity:', err);
      }
    });
  }

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ª´ input
  updateQuantity(event: any, productId: string): void {
    const newQuantity = event.target.value;  // L·∫•y gi√° tr·ªã m·ªõi t·ª´ input
    const product = this.products.find((p) => p.productId === productId);

    if (product && newQuantity >= 1) {
      
      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong gi·ªè
      this.cartService.updateCartItem(product.productId, parseInt(newQuantity, 10)).subscribe({
        next: () => {
          product.cartQuantity = parseInt(newQuantity, 10);  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong gi·ªè
          this.cartpaymentService.updateProductQuantity(productId, product.cartQuantity);
          this.updateCartPaymentSummary();
        },
        error: (err) => {
          console.error('Error updating item quantity:', err);
        }
      });
    }
  }

  // X√≥a s·∫£n ph·∫©m khi nh·∫•n "Remove"
  removeProduct(productId: string): void {
    const index = this.products.findIndex((p) => p.productId === productId);
    if (index !== -1) {
      this.products.splice(index, 1); // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
      this.cartpaymentService.removeFromCartPayment(productId);
      this.updateCartPaymentSummary(); // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn v√† s·ªë l∆∞·ª£ng
      this.cartService.removeCartItem(productId);
       // G·ªçi API ƒë·ªÉ x√≥a s·∫£n ph·∫©m kh·ªèi server
    this.cartService.removeCartItem(productId).subscribe({
      next: () => {
        console.log(`Product ${productId} removed successfully`);
      },
      error: (err) => {
        console.error('Error removing product:', err);
      }
    })
  }
}


onCheckboxChange(event: any, product: CartItem): void {
  const productId = product.productId.toString(); // ƒê·∫£m b·∫£o productId l√† chu·ªói
  if (event.target.checked) {
    this.selectedProductIds.add(productId);
    this.cartpaymentService.addToCartPayment(productId, product);
  } else {
    this.selectedProductIds.delete(productId);
    this.cartpaymentService.removeFromCartPayment(productId);
  }
  this.updateCartPaymentSummary();
}

  // C·∫≠p nh·∫≠t t·ªïng s·ªë l∆∞·ª£ng v√† t·ªïng s·ªë ti·ªÅn t·ª´ CartPaymentService
  updateCartPaymentSummary(): void {
    this.totalQuantity = this.cartpaymentService.getTotalQuantity(); // L·∫•y t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ª´ CartPaymentService
    this.total = this.cartpaymentService.getTotalAmount(); // L·∫•y t·ªïng s·ªë ti·ªÅn t·ª´ CartPaymentService
  }

  
  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t Checkout
  onCheckout(): void {
    if (this.isUserLoggedIn) {
      this.router.navigate(['/payment-shipping']);
    } else {
      this.router.navigate(['/login-page'], { queryParams: { returnUrl: '/payment-shipping' } });
    }
  }

 }